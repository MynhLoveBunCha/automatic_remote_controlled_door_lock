
uart_atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006c  0080006c  00000360  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b05  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e4  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000050b  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000413  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d3  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  8a:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
  92:	2a b1       	in	r18, 0x0a	; 10
  94:	28 61       	ori	r18, 0x18	; 24
  96:	2a b9       	out	0x0a, r18	; 10
  98:	20 b5       	in	r18, 0x20	; 32
  9a:	26 68       	ori	r18, 0x86	; 134
  9c:	20 bd       	out	0x20, r18	; 32
  9e:	dc 01       	movw	r26, r24
  a0:	cb 01       	movw	r24, r22
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	aa 1f       	adc	r26, r26
  a8:	bb 1f       	adc	r27, r27
  aa:	88 0f       	add	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	aa 1f       	adc	r26, r26
  b0:	bb 1f       	adc	r27, r27
  b2:	9c 01       	movw	r18, r24
  b4:	ad 01       	movw	r20, r26
  b6:	22 0f       	add	r18, r18
  b8:	33 1f       	adc	r19, r19
  ba:	44 1f       	adc	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	22 0f       	add	r18, r18
  c0:	33 1f       	adc	r19, r19
  c2:	44 1f       	adc	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	72 e1       	ldi	r23, 0x12	; 18
  ca:	8a e7       	ldi	r24, 0x7A	; 122
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 3c 01 	call	0x278	; 0x278 <__udivmodsi4>
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	82 0f       	add	r24, r18
  d6:	89 b9       	out	0x09, r24	; 9
  d8:	da 01       	movw	r26, r20
  da:	c9 01       	movw	r24, r18
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	a1 09       	sbc	r26, r1
  e0:	b1 09       	sbc	r27, r1
  e2:	89 2f       	mov	r24, r25
  e4:	9a 2f       	mov	r25, r26
  e6:	ab 2f       	mov	r26, r27
  e8:	bb 27       	eor	r27, r27
  ea:	80 bd       	out	0x20, r24	; 32
  ec:	08 95       	ret

000000ee <UART_RxChar>:
  ee:	5f 9b       	sbis	0x0b, 7	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <UART_RxChar>
  f2:	8c b1       	in	r24, 0x0c	; 12
  f4:	08 95       	ret

000000f6 <UART_TxChar>:
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <UART_TxChar>
  fa:	8c b9       	out	0x0c, r24	; 12
  fc:	08 95       	ret

000000fe <T1delay2s>:
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	89 bf       	out	0x39, r24	; 57
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	82 60       	ori	r24, 0x02	; 2
 106:	8e bd       	out	0x2e, r24	; 46
 108:	1d bc       	out	0x2d, r1	; 45
 10a:	1c bc       	out	0x2c, r1	; 44
 10c:	78 94       	sei
 10e:	0e 94 77 00 	call	0xee	; 0xee <UART_RxChar>
 112:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TxChar>
 116:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 11a:	8c 33       	cpi	r24, 0x3C	; 60
 11c:	c0 f3       	brcs	.-16     	; 0x10e <T1delay2s+0x10>
 11e:	1e bc       	out	0x2e, r1	; 46
 120:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 124:	08 95       	ret

00000126 <LCD_Command>:
 126:	8b bb       	out	0x1b, r24	; 27
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	85 b3       	in	r24, 0x15	; 21
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	85 bb       	out	0x15, r24	; 21
 134:	85 b3       	in	r24, 0x15	; 21
 136:	84 60       	ori	r24, 0x04	; 4
 138:	85 bb       	out	0x15, r24	; 21
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Command+0x16>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Command+0x1c>
 142:	85 b3       	in	r24, 0x15	; 21
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	85 bb       	out	0x15, r24	; 21
 148:	8f e6       	ldi	r24, 0x6F	; 111
 14a:	97 e1       	ldi	r25, 0x17	; 23
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Command+0x26>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Command+0x2c>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <LCD_Char>:
 156:	8b bb       	out	0x1b, r24	; 27
 158:	85 b3       	in	r24, 0x15	; 21
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	85 bb       	out	0x15, r24	; 21
 15e:	85 b3       	in	r24, 0x15	; 21
 160:	8d 7f       	andi	r24, 0xFD	; 253
 162:	85 bb       	out	0x15, r24	; 21
 164:	85 b3       	in	r24, 0x15	; 21
 166:	84 60       	ori	r24, 0x04	; 4
 168:	85 bb       	out	0x15, r24	; 21
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Char+0x16>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Char+0x1c>
 172:	85 b3       	in	r24, 0x15	; 21
 174:	8b 7f       	andi	r24, 0xFB	; 251
 176:	85 bb       	out	0x15, r24	; 21
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_Char+0x26>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_Char+0x2c>
 182:	00 00       	nop
 184:	08 95       	ret

00000186 <LCD_Init>:
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	84 bb       	out	0x14, r24	; 20
 18a:	8a bb       	out	0x1a, r24	; 26
 18c:	8f e3       	ldi	r24, 0x3F	; 63
 18e:	9c e9       	ldi	r25, 0x9C	; 156
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_Init+0xa>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_Init+0x10>
 196:	00 00       	nop
 198:	88 e3       	ldi	r24, 0x38	; 56
 19a:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 19e:	8c e0       	ldi	r24, 0x0C	; 12
 1a0:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 1b6:	08 95       	ret

000001b8 <LCD_String>:
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	8c 01       	movw	r16, r24
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <LCD_String+0x16>
 1c8:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_Char>
 1cc:	21 96       	adiw	r28, 0x01	; 1
 1ce:	f8 01       	movw	r30, r16
 1d0:	ec 0f       	add	r30, r28
 1d2:	fd 1f       	adc	r31, r29
 1d4:	80 81       	ld	r24, Z
 1d6:	81 11       	cpse	r24, r1
 1d8:	f7 cf       	rjmp	.-18     	; 0x1c8 <LCD_String+0x10>
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

000001e4 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
	LCD_Command (0x80);		/* cursor at home position */
 1ea:	80 e8       	ldi	r24, 0x80	; 128
 1ec:	0e 94 93 00 	call	0x126	; 0x126 <LCD_Command>
 1f0:	08 95       	ret

000001f2 <__vector_8>:
}

//Interrupt subroutines
ISR(TIMER1_OVF_vect){
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
	count++;
 1fe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
}
 208:	8f 91       	pop	r24
 20a:	0f 90       	pop	r0
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	0f 90       	pop	r0
 210:	1f 90       	pop	r1
 212:	18 95       	reti

00000214 <main>:


int main(void)
{
    char c = 0, prev_c = 0;
	DDRB = 0x03;
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x03;
 218:	88 bb       	out	0x18, r24	; 24
    UART_init(9600);
 21a:	60 e8       	ldi	r22, 0x80	; 128
 21c:	75 e2       	ldi	r23, 0x25	; 37
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
	LCD_Init();
 226:	0e 94 c3 00 	call	0x186	; 0x186 <LCD_Init>
}


int main(void)
{
    char c = 0, prev_c = 0;
 22a:	d0 e0       	ldi	r29, 0x00	; 0
 22c:	01 c0       	rjmp	.+2      	; 0x230 <main+0x1c>
	count++;
}


int main(void)
{
 22e:	dc 2f       	mov	r29, r28
	LCD_Init();
    while(1)
    {
		prev_c = c;
		
		if (prev_c == '1')
 230:	d1 33       	cpi	r29, 0x31	; 49
 232:	11 f4       	brne	.+4      	; 0x238 <main+0x24>
		{
			T1delay2s();
 234:	0e 94 7f 00 	call	0xfe	; 0xfe <T1delay2s>
		}
		
	    c=UART_RxChar();
 238:	0e 94 77 00 	call	0xee	; 0xee <UART_RxChar>
 23c:	c8 2f       	mov	r28, r24
		
		if (prev_c != c){
 23e:	d8 17       	cp	r29, r24
 240:	29 f0       	breq	.+10     	; 0x24c <main+0x38>
			LCD_Clear();
 242:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <LCD_Clear>
		else{
			UART_TxChar(c);
			continue;
		}
		
		if (c == '0'){
 246:	c0 33       	cpi	r28, 0x30	; 48
 248:	59 f4       	brne	.+22     	; 0x260 <main+0x4c>
 24a:	03 c0       	rjmp	.+6      	; 0x252 <main+0x3e>
		
		if (prev_c != c){
			LCD_Clear();
		}
		else{
			UART_TxChar(c);
 24c:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TxChar>
			continue;
 250:	ee cf       	rjmp	.-36     	; 0x22e <main+0x1a>
		}
		
		if (c == '0'){
			PORTB = 0x01;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	88 bb       	out	0x18, r24	; 24
			LCD_String("CLOSE");
 256:	80 e6       	ldi	r24, 0x60	; 96
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_String>
 25e:	08 c0       	rjmp	.+16     	; 0x270 <main+0x5c>
		}
		else if (c == '1'){
 260:	c1 33       	cpi	r28, 0x31	; 49
 262:	31 f4       	brne	.+12     	; 0x270 <main+0x5c>
			PORTB = 0x02;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	88 bb       	out	0x18, r24	; 24
			LCD_String("OPEN");
 268:	86 e6       	ldi	r24, 0x66	; 102
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_String>
		}
		
	    UART_TxChar(c);
 270:	8c 2f       	mov	r24, r28
 272:	0e 94 7b 00 	call	0xf6	; 0xf6 <UART_TxChar>
 276:	db cf       	rjmp	.-74     	; 0x22e <main+0x1a>

00000278 <__udivmodsi4>:
 278:	a1 e2       	ldi	r26, 0x21	; 33
 27a:	1a 2e       	mov	r1, r26
 27c:	aa 1b       	sub	r26, r26
 27e:	bb 1b       	sub	r27, r27
 280:	fd 01       	movw	r30, r26
 282:	0d c0       	rjmp	.+26     	; 0x29e <__udivmodsi4_ep>

00000284 <__udivmodsi4_loop>:
 284:	aa 1f       	adc	r26, r26
 286:	bb 1f       	adc	r27, r27
 288:	ee 1f       	adc	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	a2 17       	cp	r26, r18
 28e:	b3 07       	cpc	r27, r19
 290:	e4 07       	cpc	r30, r20
 292:	f5 07       	cpc	r31, r21
 294:	20 f0       	brcs	.+8      	; 0x29e <__udivmodsi4_ep>
 296:	a2 1b       	sub	r26, r18
 298:	b3 0b       	sbc	r27, r19
 29a:	e4 0b       	sbc	r30, r20
 29c:	f5 0b       	sbc	r31, r21

0000029e <__udivmodsi4_ep>:
 29e:	66 1f       	adc	r22, r22
 2a0:	77 1f       	adc	r23, r23
 2a2:	88 1f       	adc	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	1a 94       	dec	r1
 2a8:	69 f7       	brne	.-38     	; 0x284 <__udivmodsi4_loop>
 2aa:	60 95       	com	r22
 2ac:	70 95       	com	r23
 2ae:	80 95       	com	r24
 2b0:	90 95       	com	r25
 2b2:	9b 01       	movw	r18, r22
 2b4:	ac 01       	movw	r20, r24
 2b6:	bd 01       	movw	r22, r26
 2b8:	cf 01       	movw	r24, r30
 2ba:	08 95       	ret

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
